// Code generated by go-bindata. DO NOT EDIT.
// sources:
// sql/20180606143811_add_users.down.sql
// sql/20180606143811_add_users.up.sql
// sql/20180606150206_add_devices.down.sql
// sql/20180606150206_add_devices.up.sql
// sql/20180607111841_add_updated_at_to_users.down.sql
// sql/20180607111841_add_updated_at_to_users.up.sql
// sql/20180608141559_add_streams.down.sql
// sql/20180608141559_add_streams.up.sql
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __20180606143811_add_usersDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x28\x2d\x4e\x2d\x2a\x56\x70\x76\x0c\x76\x76\x74\x71\xb5\xe6\xe2\x02\x2b\x72\x8d\x08\x71\xf5\x0b\xf6\xf4\xf7\x43\x52\x58\x90\x9e\x5c\x54\x59\x50\x92\x6f\x0d\x08\x00\x00\xff\xff\xac\x0a\xba\x56\x47\x00\x00\x00")

func _20180606143811_add_usersDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__20180606143811_add_usersDownSql,
		"20180606143811_add_users.down.sql",
	)
}

func _20180606143811_add_usersDownSql() (*asset, error) {
	bytes, err := _20180606143811_add_usersDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20180606143811_add_users.down.sql", size: 71, mode: os.FileMode(420), modTime: time.Unix(1528318478, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __20180606143811_add_usersUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\xc1\x4e\xc3\x30\x10\x44\xef\xfe\x8a\x39\x36\x12\x7f\xd0\x93\x4b\xb7\x62\x85\xe3\x94\x78\xa3\x26\x5c\xa2\x10\x5b\xc8\x02\x89\x28\x8d\x11\xfd\x7b\xd4\x08\x14\xa0\xf4\x68\xcf\xbc\xd1\xbe\xdb\x92\xb4\x10\xa8\x16\xb2\x8e\x0b\x0b\xde\xc1\x16\x02\xaa\xd9\x89\xc3\xf0\xdc\x8f\xa7\x61\x7a\x5b\x2b\xf5\xd5\x14\xbd\x31\xf4\xa7\x95\x8e\x61\x3c\x62\xa5\x80\xe8\xe1\xa8\x64\x6d\xb0\x2f\x39\xd7\x65\x83\x7b\x6a\x6e\x14\x90\xa2\x87\x50\x2d\x33\x66\x2b\x63\xce\x9f\xc3\x18\xdf\xbb\x29\xb4\x2f\xe1\x84\x4d\x23\xa4\x7f\xa7\xe9\xe9\x35\xf6\x73\x78\x41\xf6\x63\xe8\xa6\xe0\xdb\x6e\x82\x70\x4e\x4e\x74\xbe\xc7\x81\xe5\x6e\x7e\xe2\xb1\xb0\x84\x2d\xed\x74\x65\xce\xdc\x61\x95\xa9\x6c\x51\xa8\x2c\x3f\x54\x04\xb6\x5b\xaa\xff\x33\x69\x53\xf4\x6d\xf4\x1f\x0a\x28\xec\xb7\x5c\x8a\xfe\xc7\xc4\x75\x76\xb9\xfa\x62\x62\x89\xb2\xf5\x67\x00\x00\x00\xff\xff\x6e\x45\x02\x18\x78\x01\x00\x00")

func _20180606143811_add_usersUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__20180606143811_add_usersUpSql,
		"20180606143811_add_users.up.sql",
	)
}

func _20180606143811_add_usersUpSql() (*asset, error) {
	bytes, err := _20180606143811_add_usersUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20180606143811_add_users.up.sql", size: 376, mode: os.FileMode(420), modTime: time.Unix(1528318469, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __20180606150206_add_devicesDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x48\x49\x2d\xcb\x4c\x4e\x2d\x56\x70\x76\x0c\x76\x76\x74\x71\xb5\xe6\xe2\x82\x48\x46\x06\xb8\x2a\x78\xba\x29\xb8\x46\x78\x06\x87\x04\x2b\xa4\x64\x16\x17\xe4\x17\x67\x96\x64\xe6\xe7\xc1\x55\x02\x02\x00\x00\xff\xff\x48\xe8\xe5\x19\x45\x00\x00\x00")

func _20180606150206_add_devicesDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__20180606150206_add_devicesDownSql,
		"20180606150206_add_devices.down.sql",
	)
}

func _20180606150206_add_devicesDownSql() (*asset, error) {
	bytes, err := _20180606150206_add_devicesDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20180606150206_add_devices.down.sql", size: 69, mode: os.FileMode(420), modTime: time.Unix(1528300830, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __20180606150206_add_devicesUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xcf\x8e\xaa\x30\x14\xc6\xf7\x3c\xc5\xb7\x13\x12\xdf\xc0\x55\xd5\xe3\xbd\xcd\x85\xc2\x2d\x25\xca\x6c\x08\x63\x9b\x49\xa3\xa1\x06\x8a\x99\x79\xfb\x09\x8d\x4e\x30\x4e\x26\xb3\x3b\x3d\xdf\x9f\xb6\xbf\x8d\x24\xa6\x08\xaa\x2e\x08\xda\x0e\x17\x37\x58\x6f\x5d\x07\x56\x82\x44\x95\x21\x5e\xd8\x4e\x3b\xd7\x2f\x96\x58\xb8\xd1\x87\x31\x59\x45\xd1\x3d\xc7\xd6\x29\x81\xef\x20\x72\x05\x3a\xf0\x52\x95\xd0\xe6\x6a\x8f\x66\x40\x1c\x01\x56\xa3\x24\xc9\x59\x8a\x42\xf2\x8c\xc9\x1a\xff\xa8\x5e\x46\x80\x77\x27\xd3\x41\xd1\x41\x85\xa8\xa8\xd2\x74\x5a\x8f\x83\xe9\x1b\xab\xc1\x85\xa2\x3f\x24\xbf\x34\x48\xda\x91\x24\xb1\xa1\x32\x78\x86\xd8\xea\x64\x0a\x5c\x7a\x7b\x6d\xbd\x69\x4e\xe6\x03\xeb\x5a\x11\x7b\xa8\xbb\x8c\xaf\x67\x7b\x0c\xe2\xd3\x55\x67\xd7\xbd\x59\x3f\x6a\x83\x6d\x5e\x4d\xbf\x28\x24\x6d\x78\xc9\x73\xf1\x68\x6b\xfd\x2f\x5c\x73\x74\xf3\x79\xee\x39\xf6\xa6\xf5\x46\x37\xad\x87\xe2\x19\x95\x8a\x65\x05\xf6\x5c\xfd\x0d\x47\xbc\xe4\x82\xb0\xa5\x1d\xab\xd2\xe9\xa1\xfb\x38\x89\x66\xa0\x2b\xc1\xff\x57\x04\x2e\xb6\x74\xf8\x9e\x77\x13\x90\x36\x56\xbf\x47\x40\x2e\xee\xeb\x38\xac\x67\x4d\x3f\x55\xdc\xf0\x3f\x97\xdc\x84\x64\xf5\x19\x00\x00\xff\xff\x89\xc1\x29\x5d\x30\x02\x00\x00")

func _20180606150206_add_devicesUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__20180606150206_add_devicesUpSql,
		"20180606150206_add_devices.up.sql",
	)
}

func _20180606150206_add_devicesUpSql() (*asset, error) {
	bytes, err := _20180606150206_add_devicesUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20180606150206_add_devices.up.sql", size: 560, mode: os.FileMode(420), modTime: time.Unix(1528300492, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __20180607111841_add_updated_at_to_usersDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\x2d\x4e\x2d\x2a\xe6\x52\x50\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x53\x28\x2d\x48\x49\x2c\x49\x4d\x89\x4f\x2c\xb1\x06\x04\x00\x00\xff\xff\xae\x16\xca\x4d\x2b\x00\x00\x00")

func _20180607111841_add_updated_at_to_usersDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__20180607111841_add_updated_at_to_usersDownSql,
		"20180607111841_add_updated_at_to_users.down.sql",
	)
}

func _20180607111841_add_updated_at_to_usersDownSql() (*asset, error) {
	bytes, err := _20180607111841_add_updated_at_to_usersDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20180607111841_add_updated_at_to_users.down.sql", size: 43, mode: os.FileMode(420), modTime: time.Unix(1528370329, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __20180607111841_add_updated_at_to_usersUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\x2d\x4e\x2d\x2a\xe6\x52\x50\x70\x74\x71\x51\x70\xf6\xf7\x09\xf5\xf5\x53\x28\x2d\x48\x49\x2c\x49\x4d\x89\x4f\x2c\x51\x08\xf1\xf4\x75\x0d\x0e\x71\xf4\x0d\x50\x08\xf7\x0c\xf1\x00\x73\x15\xa2\xfc\xfd\x5c\x15\x5c\x5c\xdd\x1c\x43\x7d\x42\x14\xfc\xfc\xc3\x35\x34\xad\x01\x01\x00\x00\xff\xff\x25\x31\x07\xa2\x51\x00\x00\x00")

func _20180607111841_add_updated_at_to_usersUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__20180607111841_add_updated_at_to_usersUpSql,
		"20180607111841_add_updated_at_to_users.up.sql",
	)
}

func _20180607111841_add_updated_at_to_usersUpSql() (*asset, error) {
	bytes, err := _20180607111841_add_updated_at_to_usersUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20180607111841_add_updated_at_to_users.up.sql", size: 81, mode: os.FileMode(420), modTime: time.Unix(1528370360, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __20180608141559_add_streamsDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\x2e\x29\x4a\x4d\xcc\x2d\x56\x70\x76\x0c\x76\x76\x74\x71\xb5\x06\x04\x00\x00\xff\xff\xa2\xef\x0c\xbb\x1b\x00\x00\x00")

func _20180608141559_add_streamsDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__20180608141559_add_streamsDownSql,
		"20180608141559_add_streams.down.sql",
	)
}

func _20180608141559_add_streamsDownSql() (*asset, error) {
	bytes, err := _20180608141559_add_streamsDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20180608141559_add_streams.down.sql", size: 27, mode: os.FileMode(420), modTime: time.Unix(1528467575, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __20180608141559_add_streamsUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xb1\x6e\x83\x40\x10\x44\xfb\xfb\x8a\x29\x41\xca\x1f\xa4\xba\xd8\x43\xb2\x0a\x1c\xce\xdd\x22\xe3\x34\x08\xf9\xae\xb8\x22\x8d\x81\x28\x9f\x1f\x61\x39\x28\x85\xe5\x72\x77\x66\x9e\xde\xce\xd3\x2a\xa1\xf6\xa5\x26\xa4\x82\x6b\x15\xec\x25\x68\xc0\x34\x5f\xd2\xf8\x35\xa1\x30\x40\x8e\x08\xf4\x62\x6b\x1c\xbc\x34\xd6\x9f\xf0\xce\xd3\x93\x01\x62\xfa\xce\xe7\x34\xe4\x08\x71\xca\x57\xfa\x2b\xc1\x75\x75\x0d\xcf\x8a\x9e\x6e\xc7\x70\x6b\x4d\x45\x8e\xe5\x3a\x5a\x72\x84\xb2\xd7\xad\xbb\x3e\xcf\x97\x34\xce\x29\x0e\xe3\x0c\x95\x86\x41\x6d\x73\xc0\x51\xf4\xed\x7a\xe2\xb3\x75\xc4\x9e\x95\xed\xea\x75\x77\x2c\x4a\x53\x3e\x1b\x73\xf3\x17\xb7\x67\x7f\xdf\x7f\xd8\x14\x87\x1c\x7f\x0c\xd0\xba\xbf\xa8\xd8\xa2\x7f\xa8\xce\xc9\x47\xf7\x98\xb8\xdc\x63\x2d\x2b\xe5\x37\x00\x00\xff\xff\x35\x45\x52\xaf\x4f\x01\x00\x00")

func _20180608141559_add_streamsUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__20180608141559_add_streamsUpSql,
		"20180608141559_add_streams.up.sql",
	)
}

func _20180608141559_add_streamsUpSql() (*asset, error) {
	bytes, err := _20180608141559_add_streamsUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20180608141559_add_streams.up.sql", size: 335, mode: os.FileMode(420), modTime: time.Unix(1528468144, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"20180606143811_add_users.down.sql": _20180606143811_add_usersDownSql,
	"20180606143811_add_users.up.sql": _20180606143811_add_usersUpSql,
	"20180606150206_add_devices.down.sql": _20180606150206_add_devicesDownSql,
	"20180606150206_add_devices.up.sql": _20180606150206_add_devicesUpSql,
	"20180607111841_add_updated_at_to_users.down.sql": _20180607111841_add_updated_at_to_usersDownSql,
	"20180607111841_add_updated_at_to_users.up.sql": _20180607111841_add_updated_at_to_usersUpSql,
	"20180608141559_add_streams.down.sql": _20180608141559_add_streamsDownSql,
	"20180608141559_add_streams.up.sql": _20180608141559_add_streamsUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"20180606143811_add_users.down.sql": &bintree{_20180606143811_add_usersDownSql, map[string]*bintree{}},
	"20180606143811_add_users.up.sql": &bintree{_20180606143811_add_usersUpSql, map[string]*bintree{}},
	"20180606150206_add_devices.down.sql": &bintree{_20180606150206_add_devicesDownSql, map[string]*bintree{}},
	"20180606150206_add_devices.up.sql": &bintree{_20180606150206_add_devicesUpSql, map[string]*bintree{}},
	"20180607111841_add_updated_at_to_users.down.sql": &bintree{_20180607111841_add_updated_at_to_usersDownSql, map[string]*bintree{}},
	"20180607111841_add_updated_at_to_users.up.sql": &bintree{_20180607111841_add_updated_at_to_usersUpSql, map[string]*bintree{}},
	"20180608141559_add_streams.down.sql": &bintree{_20180608141559_add_streamsDownSql, map[string]*bintree{}},
	"20180608141559_add_streams.up.sql": &bintree{_20180608141559_add_streamsUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

